/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package om.lang.pie

import kotlin.test.Test
import kotlin.test.assertEquals

class InferShould {
    @Test
    fun inferSimpleTypes() {
        assertSynthedTo("0", PiType.Nat)
        assertSynthedTo("1", PiType.Nat)
        assertSynthedTo("Nat", PiType.Set)
        assertSynthedTo("Set", PiType.Set)
    }

    @Test
    fun checkSimpleProgram() {
        assertOutput("""
            (claim a Nat)
            (define a 0)
            (output a)
        """, PiValue.Zero)

        assertOutput("""
            (claim a Nat)
            (define a 0)
            
            (claim b Nat)
            (define b
              (add1 a))
            (output b)
        """, PiValue.fromInt(1))

        assertOutput("""
            (claim a (-> Nat Nat))
            (define a
              (lam (x)
                (add1 x)))
                
            (claim b Nat)
            (define b (a 0))
            (output b)
        """, PiValue.fromInt(1))

        assertOutput("""
            (claim +
              (-> Nat Nat Nat))
            (define +
              (lam (n m)
                (rec-Nat Nat n m
                  (lam (n-1 sum)
                    (add1 sum)))))
            (output (+ 1 2))
        """, PiValue.fromInt(3))
    }

    private fun assertSynthedTo(source: String, expected: PiType) {
        val ctx = TypeChecking.emptyCtx
        val sexpr = SExprParser.parseOne(source)
        val expr = SExprToProgram.expr(sexpr)
        assertEquals(expected, TypeChecking.synth(expr, ctx))
    }

    private fun assertOutput(source: String, value: PiValue) {
        val sexprs = SExprParser.parseMany(source)
        val program = sexprs.map(SExprToProgram::topLevel)
        assertEquals(listOf(value), Eval.program(program))
    }
}
