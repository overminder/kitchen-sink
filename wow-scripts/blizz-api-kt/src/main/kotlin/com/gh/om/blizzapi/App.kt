/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.gh.om.blizzapi

import com.google.gson.annotations.SerializedName
import io.ktor.client.HttpClient
import io.ktor.client.engine.cio.CIO
import io.ktor.client.features.auth.Auth
import io.ktor.client.features.auth.providers.basic
import io.ktor.client.features.json.GsonSerializer
import io.ktor.client.features.json.JsonFeature
import io.ktor.client.features.logging.DEFAULT
import io.ktor.client.features.logging.LogLevel
import io.ktor.client.features.logging.Logger
import io.ktor.client.features.logging.Logging
import io.ktor.client.request.forms.submitForm
import io.ktor.client.request.url
import io.ktor.http.parametersOf
import kotlinx.coroutines.runBlocking
import org.tomlj.Toml
import org.tomlj.TomlTable

private const val LOGGING = false

data class AccessToken(@SerializedName("access_token") val value: String)

suspend fun retriveToken(id: String, secret: String): AccessToken {
    val c = HttpClient(CIO) {
        install(Auth) {
            basic {
                sendWithoutRequest = true
                username = id
                password = secret
            }
        }
        if (LOGGING) {
            install(Logging) {
                logger = Logger.DEFAULT
                level = LogLevel.HEADERS
            }
        }
        install(JsonFeature) {
            serializer = GsonSerializer()
        }
    }
    val postBody = parametersOf("grant_type", "client_credentials")
    return c.submitForm(postBody) {
        url("https://us.battle.net/oauth/token")
    }
}

fun main(args: Array<String>) {
    val config = Toml.parse(Any::class.java.getResourceAsStream("/config.toml"))
    val client = config["client"] as TomlTable
    val token = runBlocking {
        retriveToken(client["id"] as String, client["secret"] as String)
    }
    println(token)
}
